// Generated by CoffeeScript 1.6.1
(function() {
  var Chr_Manhattan_Plot, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Chr_Manhattan_Plot = (function() {

    function Chr_Manhattan_Plot(plot_height, plot_width, chr) {
      this.plot_height = plot_height;
      this.plot_width = plot_width;
      this.chr = chr;
      this.qtl_results = js_data.qtl_results;
      console.log("qtl_results are:", this.qtl_results);
      console.log("chr is:", this.chr);
      this.get_max_chr();
      this.filter_qtl_results();
      console.log("filtered results:", this.these_results);
      this.get_qtl_count();
      this.x_coords = [];
      this.y_coords = [];
      this.marker_names = [];
      console.time('Create coordinates');
      this.create_coordinates();
      console.log("@x_coords: ", this.x_coords);
      console.log("@y_coords: ", this.y_coords);
      console.timeEnd('Create coordinates');
      this.x_buffer = this.plot_width / 30;
      this.y_buffer = this.plot_height / 20;
      this.x_max = d3.max(this.x_coords);
      this.y_max = d3.max(this.y_coords) * 1.2;
      this.svg = this.create_svg();
      this.plot_coordinates = _.zip(this.x_coords, this.y_coords, this.marker_names);
      console.log("coordinates:", this.plot_coordinates);
      this.plot_height -= this.y_buffer;
      this.create_scales();
      console.time('Create graph');
      this.create_graph();
      console.timeEnd('Create graph');
    }

    Chr_Manhattan_Plot.prototype.get_max_chr = function() {
      var key, _results;
      this.max_chr = 0;
      _results = [];
      for (key in js_data.chromosomes) {
        console.log("key is:", key);
        if (parseInt(key) > this.max_chr) {
          _results.push(this.max_chr = parseInt(key));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Chr_Manhattan_Plot.prototype.filter_qtl_results = function() {
      var result, this_chr, _i, _len, _ref, _results;
      this.these_results = [];
      this_chr = 100;
      _ref = this.qtl_results;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        result = _ref[_i];
        if (result.chr === "X") {
          this_chr = this.max_chr;
        } else {
          this_chr = result.chr;
        }
        console.log("this_chr is:", this_chr);
        console.log("@chr[0] is:", parseInt(this.chr[0]));
        if (this_chr > parseInt(this.chr[0])) {
          break;
        }
        if (parseInt(this_chr) === parseInt(this.chr[0])) {
          _results.push(this.these_results.push(result));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Chr_Manhattan_Plot.prototype.get_qtl_count = function() {
      var high_qtl_count, result, _i, _len, _ref;
      high_qtl_count = 0;
      _ref = this.these_results;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        result = _ref[_i];
        if (result.lod_score > 1) {
          high_qtl_count += 1;
        }
      }
      console.log("high_qtl_count:", high_qtl_count);
      if (high_qtl_count > 10000) {
        return this.y_axis_filter = 2;
      } else if (high_qtl_count > 1000) {
        return this.y_axis_filter = 1;
      } else {
        return this.y_axis_filter = 0;
      }
    };

    Chr_Manhattan_Plot.prototype.create_coordinates = function() {
      var result, _i, _len, _ref, _results;
      _ref = this.these_results;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        result = _ref[_i];
        this.x_coords.push(parseFloat(result.Mb));
        this.y_coords.push(result.lod_score);
        _results.push(this.marker_names.push(result.name));
      }
      return _results;
    };

    Chr_Manhattan_Plot.prototype.create_svg = function() {
      var svg;
      svg = d3.select("#manhattan_plot").append("svg").attr("class", "manhattan_plot").attr("width", this.plot_width + this.x_buffer).attr("height", this.plot_height + this.y_buffer).append("g");
      return svg;
    };

    Chr_Manhattan_Plot.prototype.create_scales = function() {
      this.x_scale = d3.scale.linear().domain([0, this.chr[1]]).range([this.x_buffer, this.plot_width]);
      return this.y_scale = d3.scale.linear().domain([this.y_axis_filter, this.y_max]).range([this.plot_height, this.y_buffer]);
    };

    Chr_Manhattan_Plot.prototype.create_graph = function() {
      this.add_border();
      this.add_x_axis();
      this.add_y_axis();
      return this.add_plot_points();
    };

    Chr_Manhattan_Plot.prototype.add_border = function() {
      var border_coords,
        _this = this;
      border_coords = [[this.y_buffer, this.plot_height, this.x_buffer, this.x_buffer], [this.y_buffer, this.plot_height, this.plot_width, this.plot_width], [this.y_buffer, this.y_buffer, this.x_buffer, this.plot_width], [this.plot_height, this.plot_height, this.x_buffer, this.plot_width]];
      return this.svg.selectAll("line").data(border_coords).enter().append("line").attr("y1", function(d) {
        return d[0];
      }).attr("y2", function(d) {
        return d[1];
      }).attr("x1", function(d) {
        return d[2];
      }).attr("x2", function(d) {
        return d[3];
      }).style("stroke", "#000");
    };

    Chr_Manhattan_Plot.prototype.add_x_axis = function() {
      var _this = this;
      this.xAxis = d3.svg.axis().scale(this.x_scale).orient("bottom").ticks(20);
      this.xAxis.tickFormat(function(d) {
        d3.format("d");
        return d;
      });
      return this.svg.append("g").attr("class", "x_axis").attr("transform", "translate(0," + this.plot_height + ")").call(this.xAxis).selectAll("text").attr("text-anchor", "right").attr("font-size", "12px").attr("dx", "-1.6em").attr("transform", function(d) {
        return "translate(-12,0) rotate(-90)";
      });
    };

    Chr_Manhattan_Plot.prototype.add_y_axis = function() {
      this.yAxis = d3.svg.axis().scale(this.y_scale).orient("left").ticks(5);
      return this.svg.append("g").attr("class", "y_axis").attr("transform", "translate(" + this.x_buffer + ",0)").call(this.yAxis);
    };

    Chr_Manhattan_Plot.prototype.add_plot_points = function() {
      var _this = this;
      return this.plot_point = this.svg.selectAll("circle").data(this.plot_coordinates).enter().append("circle").attr("cx", function(d) {
        return _this.x_scale(d[0]);
      }).attr("cy", function(d) {
        return _this.y_scale(d[1]);
      }).attr("r", 2).attr("id", function(d) {
        return "point_" + String(d[2]);
      }).classed("circle", true).on("mouseover", function(d) {
        var this_id;
        console.log("d3.event is:", d3.event);
        console.log("d is:", d);
        this_id = "point_" + String(d[2]);
        return d3.select("#" + this_id).classed("d3_highlight", true).attr("r", 5).attr("fill", "yellow").call(_this.show_marker_in_table(d));
      }).on("mouseout", function(d) {
        var this_id;
        this_id = "point_" + String(d[2]);
        return d3.select("#" + this_id).classed("d3_highlight", false).attr("r", 2).attr("fill", "black");
      });
    };

    Chr_Manhattan_Plot.prototype.show_marker_in_table = function(marker_info) {
      var marker_name;
      console.log("in show_marker_in_table");
      /* Searches for the select marker in the results table below
      */

      if (marker_info) {
        marker_name = marker_info[2];
        return $("#qtl_results_filter").find("input:first").val(marker_name).change();
      }
    };

    return Chr_Manhattan_Plot;

  })();

  root.Chr_Manhattan_Plot = Chr_Manhattan_Plot;

}).call(this);
