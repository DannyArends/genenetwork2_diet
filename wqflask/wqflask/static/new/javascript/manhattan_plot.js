// Generated by CoffeeScript 1.7.1
var chrscales, formatAxis, lodchart, maxdiff, reorgLodData;

lodchart = function() {
  var axispos, chart, chrGap, chrSelect, darkrect, height, lightrect, linewidth, lodcurve, lodlinecolor, lodvarname, margin, markerSelect, nyticks, pad4heatmap, pointcolor, pointhover, pointsAtMarkers, pointsize, pointstroke, rotate_ylab, title, titlepos, width, xlab, xscale, ylab, ylim, yscale, yticks;
  width = 800;
  height = 500;
  margin = {
    left: 60,
    top: 40,
    right: 40,
    bottom: 40,
    inner: 5
  };
  axispos = {
    xtitle: 25,
    ytitle: 30,
    xlabel: 5,
    ylabel: 5
  };
  titlepos = 20;
  ylim = null;
  nyticks = 5;
  yticks = null;
  chrGap = 8;
  darkrect = "#F1F1F9";
  lightrect = "#FBFBFF";
  lodlinecolor = "darkslateblue";
  linewidth = 2;
  pointcolor = "darkslateblue";
  pointhover = "#E9CFEC";
  pointsize = 2;
  pointstroke = "black";
  title = "";
  xlab = "Chromosome";
  ylab = "LOD score";
  rotate_ylab = null;
  yscale = d3.scale.linear();
  xscale = null;
  pad4heatmap = false;
  lodcurve = null;
  lodvarname = null;
  markerSelect = null;
  chrSelect = null;
  pointsAtMarkers = true;
  chart = function(selection) {
    return selection.each(function(data) {
      var g, gEnter, hiddenpoints, lodvarnum, markerpoints, markertip, redraw_plot, svg, titlegrp, x, xaxis, yaxis;
      console.log("data:", data);
      lodvarname = lodvarname != null ? lodvarname : data.lodnames[0];
      data[lodvarname] = (function() {
        var _i, _len, _ref, _results;
        _ref = data[lodvarname];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          _results.push(Math.abs(x));
        }
        return _results;
      })();
      ylim = ylim != null ? ylim : [0, d3.max(data[lodvarname])];
      lodvarnum = data.lodnames.indexOf(lodvarname);
      svg = d3.select(this).selectAll("svg").data([data]);
      gEnter = svg.enter().append("svg").append("g");
      svg.attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom);
      g = svg.select("g");
      g.append("rect").attr("x", margin.left).attr("y", margin.top).attr("height", height).attr("width", width).attr("fill", darkrect).attr("stroke", "none");
      yscale.domain(ylim).range([height + margin.top, margin.top + margin.inner]);
      yticks = yticks != null ? yticks : yscale.ticks(nyticks);
      data = reorgLodData(data, lodvarname);
      data = chrscales(data, width, chrGap, margin.left, pad4heatmap);
      xscale = data.xscale;
      chrSelect = g.append("g").attr("class", "chrRect").selectAll("empty").data(data.chrnames).enter().append("rect").attr("id", function(d) {
        return "chrrect" + d[0];
      }).attr("x", function(d, i) {
        if (i === 0 && pad4heatmap) {
          return data.chrStart[i];
        }
        return data.chrStart[i] - chrGap / 2;
      }).attr("width", function(d, i) {
        if ((i === 0 || i + 1 === data.chrnames.length) && pad4heatmap) {
          return data.chrEnd[i] - data.chrStart[i] + chrGap / 2;
        }
        return data.chrEnd[i] - data.chrStart[i] + chrGap;
      }).attr("y", margin.top).attr("height", height).attr("fill", function(d, i) {
        if (i % 2) {
          return darkrect;
        }
        return lightrect;
      }).attr("stroke", "none").on("click", function(d) {
        return redraw_plot(d);
      });
      xaxis = g.append("g").attr("class", "x axis");
      xaxis.selectAll("empty").data(data.chrnames).enter().append("text").attr("class", "chr_label").text(function(d) {
        return d[0];
      }).attr("x", function(d, i) {
        return (data.chrStart[i] + data.chrEnd[i]) / 2;
      }).attr("y", margin.top + height + axispos.xlabel).attr("cursor", "pointer").on("click", function(d) {
        return redraw_plot(d);
      });
      xaxis.append("text").attr("class", "title").attr("y", margin.top + height + axispos.xtitle).attr("x", margin.left + width / 2).text(xlab);
      redraw_plot = function(chr_ob) {
        var chr_plot;
        console.log("chr_name is:", chr_ob[0]);
        console.log("chr_length is:", chr_ob[1]);
        $('#topchart').remove();
        $('#chart_container').append('<div class="qtlcharts" id="topchart"></div>');
        return chr_plot = new Chr_Manhattan_Plot(600, 1200, chr_ob);
      };
      rotate_ylab = rotate_ylab != null ? rotate_ylab : ylab.length > 1;
      yaxis = g.append("g").attr("class", "y axis");
      yaxis.selectAll("empty").data(yticks).enter().append("line").attr("y1", function(d) {
        return yscale(d);
      }).attr("y2", function(d) {
        return yscale(d);
      }).attr("x1", margin.left).attr("x2", margin.left + 7).attr("fill", "none").attr("stroke", "white").attr("stroke-width", 1).style("pointer-events", "none");
      yaxis.selectAll("empty").data(yticks).enter().append("text").attr("y", function(d) {
        return yscale(d);
      }).attr("x", margin.left - axispos.ylabel).attr("fill", "blue").text(function(d) {
        return formatAxis(yticks)(d);
      });
      yaxis.append("text").attr("class", "title").attr("y", margin.top + height / 2).attr("x", margin.left - axispos.ytitle).text(ylab).attr("transform", rotate_ylab ? "rotate(270," + (margin.left - axispos.ytitle) + "," + (margin.top + height / 2) + ")" : "");
      if (pointsize > 0) {
        markerpoints = g.append("g").attr("id", "markerpoints_visible");
        markerpoints.selectAll("empty").data(data.markers).enter().append("circle").attr("cx", function(d) {
          return xscale[d.chr](d.pos);
        }).attr("cy", function(d) {
          return yscale(d.lod);
        }).attr("r", pointsize).attr("fill", pointcolor).attr("stroke", pointstroke).attr("pointer-events", "hidden");
      }
      titlegrp = g.append("g").attr("class", "title").append("text").attr("x", margin.left + width / 2).attr("y", margin.top - titlepos).text(title);
      g.append("rect").attr("x", margin.left).attr("y", margin.top).attr("height", height).attr("width", function() {
        if (pad4heatmap) {
          return data.chrEnd.slice(-1)[0] - margin.left;
        }
        return data.chrEnd.slice(-1)[0] - margin.left + chrGap / 2;
      }).attr("fill", "none").attr("stroke", "black").attr("stroke-width", "none");
      if (pointsAtMarkers) {
        hiddenpoints = g.append("g").attr("id", "markerpoints_hidden");
        markertip = d3.tip().attr('class', 'd3-tip').html(function(d) {
          return [d.name, " LRS = " + (d3.format('.2f')(d.lod))];
        }).direction("e").offset([0, 10]);
        svg.call(markertip);
        return markerSelect = hiddenpoints.selectAll("empty").data(data.markers).enter().append("circle").attr("cx", function(d) {
          return xscale[d.chr](d.pos);
        }).attr("cy", function(d) {
          return yscale(d.lod);
        }).attr("id", function(d) {
          return d.name;
        }).attr("r", d3.max([pointsize * 2, 3])).attr("opacity", 0).attr("fill", pointhover).attr("stroke", pointstroke).attr("stroke-width", "1").on("mouseover.paneltip", function(d) {
          d3.select(this).attr("opacity", 1);
          return markertip.show(d);
        }).on("mouseout.paneltip", function() {
          return d3.select(this).attr("opacity", 0).call(markertip.hide);
        });
      }
    });
  };
  chart.width = function(value) {
    if (!arguments.length) {
      return width;
    }
    width = value;
    return chart;
  };
  chart.height = function(value) {
    if (!arguments.length) {
      return height;
    }
    height = value;
    return chart;
  };
  chart.margin = function(value) {
    if (!arguments.length) {
      return margin;
    }
    margin = value;
    return chart;
  };
  chart.titlepos = function(value) {
    if (!arguments.length) {
      return titlepos;
    }
    titlepos;
    return chart;
  };
  chart.axispos = function(value) {
    if (!arguments.length) {
      return axispos;
    }
    axispos = value;
    return chart;
  };
  chart.ylim = function(value) {
    if (!arguments.length) {
      return ylim;
    }
    ylim = value;
    return chart;
  };
  chart.nyticks = function(value) {
    if (!arguments.length) {
      return nyticks;
    }
    nyticks = value;
    return chart;
  };
  chart.yticks = function(value) {
    if (!arguments.length) {
      return yticks;
    }
    yticks = value;
    return chart;
  };
  chart.chrGap = function(value) {
    if (!arguments.length) {
      return chrGap;
    }
    chrGap = value;
    return chart;
  };
  chart.darkrect = function(value) {
    if (!arguments.length) {
      return darkrect;
    }
    darkrect = value;
    return chart;
  };
  chart.lightrect = function(value) {
    if (!arguments.length) {
      return lightrect;
    }
    lightrect = value;
    return chart;
  };
  chart.linecolor = function(value) {
    var linecolor;
    if (!arguments.length) {
      return linecolor;
    }
    linecolor = value;
    return chart;
  };
  chart.linewidth = function(value) {
    if (!arguments.length) {
      return linewidth;
    }
    linewidth = value;
    return chart;
  };
  chart.pointcolor = function(value) {
    if (!arguments.length) {
      return pointcolor;
    }
    pointcolor = value;
    return chart;
  };
  chart.pointhover = function(value) {
    if (!arguments.length) {
      return pointhover;
    }
    pointhover = value;
    return chart;
  };
  chart.pointsize = function(value) {
    if (!arguments.length) {
      return pointsize;
    }
    pointsize = value;
    return chart;
  };
  chart.pointstroke = function(value) {
    if (!arguments.length) {
      return pointstroke;
    }
    pointstroke = value;
    return chart;
  };
  chart.title = function(value) {
    if (!arguments.length) {
      return title;
    }
    title = value;
    return chart;
  };
  chart.xlab = function(value) {
    if (!arguments.length) {
      return xlab;
    }
    xlab = value;
    return chart;
  };
  chart.ylab = function(value) {
    if (!arguments.length) {
      return ylab;
    }
    ylab = value;
    return chart;
  };
  chart.rotate_ylab = function(value) {
    if (!arguments.length) {
      return rotate_ylab;
    }
    rotate_ylab = value;
    return chart;
  };
  chart.lodvarname = function(value) {
    if (!arguments.length) {
      return lodvarname;
    }
    lodvarname = value;
    return chart;
  };
  chart.pad4heatmap = function(value) {
    if (!arguments.length) {
      return pad4heatmap;
    }
    pad4heatmap = value;
    return chart;
  };
  chart.pointsAtMarkers = function(value) {
    if (!arguments.length) {
      return pointsAtMarkers;
    }
    pointsAtMarkers = value;
    return chart;
  };
  chart.yscale = function() {
    return yscale;
  };
  chart.xscale = function() {
    return xscale;
  };
  chart.markerSelect = function() {
    return markerSelect;
  };
  chart.chrSelect = function() {
    return chrSelect;
  };
  return chart;
};

reorgLodData = function(data, lodvarname) {
  var chr, i, j, lodcolumn, lodval, marker, pos, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
  if (lodvarname == null) {
    lodvarname = null;
  }
  data.posByChr = {};
  data.lodByChr = {};
  _ref = data.chrnames;
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    chr = _ref[i];
    data.posByChr[chr[0]] = [];
    data.lodByChr[chr[0]] = [];
    _ref1 = data.pos;
    for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
      pos = _ref1[j];
      if (data.chr[j] === chr[0]) {
        data.posByChr[chr[0]].push(pos);
        if (!Array.isArray(data.lodnames)) {
          data.lodnames = [data.lodnames];
        }
        lodval = (function() {
          var _k, _len2, _ref2, _results;
          _ref2 = data.lodnames;
          _results = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            lodcolumn = _ref2[_k];
            _results.push(data[lodcolumn][j]);
          }
          return _results;
        })();
        data.lodByChr[chr[0]].push(lodval);
      }
    }
  }
  if (lodvarname != null) {
    data.markers = [];
    _ref2 = data.markernames;
    for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
      marker = _ref2[i];
      if (marker !== "") {
        data.markers.push({
          name: marker,
          chr: data.chr[i],
          pos: data.pos[i],
          lod: data[lodvarname][i]
        });
      }
    }
  }
  return data;
};

chrscales = function(data, width, chrGap, leftMargin, pad4heatmap) {
  var L, chr, chrEnd, chrLength, chrStart, cur, d, i, maxd, rng, totalChrLength, w, _i, _j, _len, _len1, _ref, _ref1;
  chrStart = [];
  chrEnd = [];
  chrLength = [];
  totalChrLength = 0;
  maxd = 0;
  _ref = data.chrnames;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    chr = _ref[_i];
    d = maxdiff(data.posByChr[chr[0]]);
    if (d > maxd) {
      maxd = d;
    }
    rng = d3.extent(data.posByChr[chr[0]]);
    chrStart.push(rng[0]);
    chrEnd.push(rng[1]);
    L = rng[1] - rng[0];
    chrLength.push(L);
    totalChrLength += L;
  }
  if (pad4heatmap) {
    data.recwidth = maxd;
    chrStart = chrStart.map(function(x) {
      return x - maxd / 2;
    });
    chrEnd = chrEnd.map(function(x) {
      return x + maxd / 2;
    });
    chrLength = chrLength.map(function(x) {
      return x + maxd;
    });
    totalChrLength += chrLength.length * maxd;
  }
  data.chrStart = [];
  data.chrEnd = [];
  cur = leftMargin;
  if (!pad4heatmap) {
    cur += chrGap / 2;
  }
  data.xscale = {};
  _ref1 = data.chrnames;
  for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
    chr = _ref1[i];
    data.chrStart.push(cur);
    w = Math.round((width - chrGap * (data.chrnames.length - pad4heatmap)) / totalChrLength * chrLength[i]);
    data.chrEnd.push(cur + w);
    cur = data.chrEnd[i] + chrGap;
    data.xscale[chr[0]] = d3.scale.linear().domain([chrStart[i], chrEnd[i]]).range([data.chrStart[i], data.chrEnd[i]]);
  }
  return data;
};

maxdiff = function(x) {
  var d, i, result, _i, _ref;
  if (x.length < 2) {
    return null;
  }
  result = x[1] - x[0];
  if (x.length < 3) {
    return result;
  }
  for (i = _i = 2, _ref = x.length; 2 <= _ref ? _i < _ref : _i > _ref; i = 2 <= _ref ? ++_i : --_i) {
    d = x[i] - x[i - 1];
    if (d > result) {
      result = d;
    }
  }
  return result;
};

formatAxis = function(d) {
  var ndig;
  d = d[1] - d[0];
  ndig = Math.floor(Math.log(d % 10) / Math.log(10));
  if (ndig > 0) {
    ndig = 0;
  }
  ndig = Math.abs(ndig);
  return d3.format("." + ndig + "f");
};
