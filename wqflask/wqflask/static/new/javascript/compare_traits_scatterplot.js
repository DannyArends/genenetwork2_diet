// Generated by CoffeeScript 1.6.1
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.create_scatterplot = function(json_ids, json_data) {
    var data, h, halfh, halfw, indID, margin, mychart, totalh, totalw, w;
    console.log("TESTING TESTING2");
    h = 400;
    w = 500;
    margin = {
      left: 60,
      top: 40,
      right: 40,
      bottom: 40,
      inner: 5
    };
    halfh = h + margin.top + margin.bottom;
    totalh = halfh * 2;
    halfw = w + margin.left + margin.right;
    totalw = halfw * 2;
    mychart = scatterplot().xvar(0).yvar(1).xlab("X").ylab("Y").height(h).width(w).margin(margin);
    data = json_data;
    indID = json_ids;
    d3.select("div#comparison_scatterplot").datum({
      data: data,
      indID: indID
    }).call(mychart);
    return mychart.pointsSelect().on("mouseover", function(d) {
      return d3.select(this).attr("r", mychart.pointsize() * 3);
    }).on("mouseout", function(d) {
      return d3.select(this).attr("r", mychart.pointsize());
    });
  };

  root.create_scatterplots = function(json_ids, json_data) {
    var brush, brushend, brushmove, brushstart, chart, h, halfh, halfw, i, margin, mychart, svg, totalh, totalw, w, xscale, xshift, xvar, yscale, yshift, yvar, _i, _j, _results;
    h = 400;
    w = 500;
    margin = {
      left: 60,
      top: 40,
      right: 40,
      bottom: 40,
      inner: 5
    };
    halfh = h + margin.top + margin.bottom;
    totalh = halfh * 2;
    halfw = w + margin.left + margin.right;
    totalw = halfw * 2;
    xvar = [1, 2, 2];
    yvar = [0, 0, 1];
    xshift = [0, halfw, halfw];
    yshift = [0, 0, halfh];
    svg = d3.select("div#chart2").append("svg").attr("height", totalh).attr("width", totalw);
    mychart = [];
    chart = [];
    for (i = _i = 0; _i <= 2; i = ++_i) {
      mychart[i] = scatterplot().xvar(xvar[i]).yvar(yvar[i]).nxticks(6).height(h).width(w).margin(margin).pointsize(4).xlab("X" + (xvar[i] + 1)).ylab("X" + (yvar[i] + 1)).title("X" + (yvar[i] + 1) + " vs. X" + (xvar[i] + 1));
      chart[i] = svg.append("g").attr("id", "chart" + i).attr("transform", "translate(" + xshift[i] + "," + yshift[i] + ")");
      chart[i].datum({
        data: data
      }).call(mychart[i]);
    }
    brush = [];
    brushstart = function(i) {
      return function() {
        var j, _j;
        for (j = _j = 0; _j <= 2; j = ++_j) {
          if (j !== i) {
            chart[j].call(brush[j].clear());
          }
        }
        return svg.selectAll("circle").attr("opacity", 0.6).classed("selected", false);
      };
    };
    brushmove = function(i) {
      return function() {
        var e;
        svg.selectAll("circle").classed("selected", false);
        e = brush[i].extent();
        return chart[i].selectAll("circle").classed("selected", function(d, j) {
          var circ, cx, cy, selected;
          circ = d3.select(this);
          cx = circ.attr("cx");
          cy = circ.attr("cy");
          selected = e[0][0] <= cx && cx <= e[1][0] && e[0][1] <= cy && cy <= e[1][1];
          if (selected) {
            svg.selectAll("circle.pt" + j).classed("selected", true);
          }
          return selected;
        });
      };
    };
    brushend = function() {
      return svg.selectAll("circle").attr("opacity", 1);
    };
    xscale = d3.scale.linear().domain([margin.left, margin.left + w]).range([margin.left, margin.left + w]);
    yscale = d3.scale.linear().domain([margin.top, margin.top + h]).range([margin.top, margin.top + h]);
    _results = [];
    for (i = _j = 0; _j <= 2; i = ++_j) {
      brush[i] = d3.svg.brush().x(xscale).y(yscale).on("brushstart", brushstart(i)).on("brush", brushmove(i)).on("brushend", brushend);
      _results.push(chart[i].call(brush[i]));
    }
    return _results;
  };

}).call(this);
