// Generated by CoffeeScript 1.6.1
(function() {
  var Histogram, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Histogram = (function() {

    function Histogram(sample_list, sample_group) {
      this.sample_list = sample_list;
      this.sample_group = sample_group;
      this.sort_by = "name";
      this.format_count = d3.format(",.0f");
      this.get_samples();
      this.margin = {
        top: 10,
        right: 30,
        bottom: 30,
        left: 30
      };
      this.plot_width = 960 - this.margin.left - this.margin.right;
      this.plot_height = 500 - this.margin.top - this.margin.bottom;
      this.x_buffer = this.plot_width / 20;
      this.y_buffer = this.plot_height / 20;
      this.y_min = d3.min(this.sample_vals);
      this.y_max = d3.max(this.sample_vals) * 1.1;
      this.plot_height -= this.y_buffer;
      this.create_x_scale();
      this.get_histogram_data();
      this.create_y_scale();
      this.svg = this.create_svg();
      this.create_graph();
    }

    Histogram.prototype.get_samples = function() {
      var attr_vals, attribute, key, sample, _i, _j, _len, _len1, _ref, _ref1;
      this.sample_names = (function() {
        var _i, _len, _ref, _results;
        _ref = this.sample_list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sample = _ref[_i];
          if (sample.value !== null) {
            _results.push(sample.name);
          }
        }
        return _results;
      }).call(this);
      this.sample_vals = (function() {
        var _i, _len, _ref, _results;
        _ref = this.sample_list;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sample = _ref[_i];
          if (sample.value !== null) {
            _results.push(sample.value);
          }
        }
        return _results;
      }).call(this);
      this.attributes = (function() {
        var _results;
        _results = [];
        for (key in this.sample_list[0]["extra_attributes"]) {
          _results.push(key);
        }
        return _results;
      }).call(this);
      console.log("attributes:", this.attributes);
      this.sample_attr_vals = [];
      if (this.attributes.length > 0) {
        _ref = this.sample_list;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sample = _ref[_i];
          attr_vals = {};
          _ref1 = this.attributes;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            attribute = _ref1[_j];
            attr_vals[attribute] = sample["extra_attributes"][attribute];
          }
          this.sample_attr_vals.push(attr_vals);
        }
      }
      return this.samples = _.zip(this.sample_names, this.sample_vals, this.sample_attr_vals);
    };

    Histogram.prototype.create_svg = function() {
      var svg;
      svg = d3.select("#histogram").append("svg").attr("class", "bar_chart").attr("width", this.plot_width + this.margin.left + this.margin.right).attr("height", this.plot_height + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
      return svg;
    };

    Histogram.prototype.create_x_scale = function() {
      return this.x_scale = d3.scale.linear().domain([d3.min(this.sample_vals), d3.max(this.sample_vals)]).range([0, this.plot_width]);
    };

    Histogram.prototype.get_histogram_data = function() {
      console.log("sample_vals:", this.sample_vals);
      this.histogram_data = d3.layout.histogram().bins(this.x_scale.ticks(10))(this.sample_vals);
      return console.log("histogram_data:", this.histogram_data[0]);
    };

    Histogram.prototype.create_y_scale = function() {
      var _this = this;
      return this.y_scale = d3.scale.linear().domain([
        0, d3.max(this.histogram_data, function(d) {
          return d.y;
        })
      ]).range([this.plot_height, 0]);
    };

    Histogram.prototype.create_graph = function() {
      this.add_x_axis();
      return this.add_bars();
    };

    Histogram.prototype.add_x_axis = function() {
      var x_axis;
      x_axis = d3.svg.axis().scale(this.x_scale).orient("bottom");
      return this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.plot_height + ")").call(x_axis);
    };

    Histogram.prototype.add_bars = function() {
      var _this = this;
      return this.svg.selectAll(".bar").data(this.histogram_data).enter().append("g").attr("class", "bar").attr("transform", function(d) {
        return "translate(" + _this.margin.left + "," + _this.margin.top + ")";
      }).append("rect").attr("x", 1).attr("width", this.x_scale(this.histogram_data[0].dx) - 1).attr("height", function(d) {
        return _this.plot_height - _this.y_scale(d.y);
      }).append("text").attr("dy", ".75em").attr("y", 6).attr("x", this.x_scale(this.histogram_data[0].dx) / 2).attr("text-anchor", "middle").text(function(d) {
        return _this.format_count(d.y);
      });
    };

    return Histogram;

  })();

  root.Histogram = Histogram;

}).call(this);
