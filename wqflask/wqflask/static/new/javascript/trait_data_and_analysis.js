// Generated by CoffeeScript 1.3.3
(function() {
  var isNumber;

  console.log("start_b");

  isNumber = function(o) {
    return !isNaN((o - 0) && o !== null);
  };

  $(function() {
    var edit_data_change, hide_tabs, make_table, mean, process_id, stats_mdp_change;
    hide_tabs = function(start) {
      var x, _i, _results;
      _results = [];
      for (x = _i = start; start <= 10 ? _i <= 10 : _i >= 10; x = start <= 10 ? ++_i : --_i) {
        _results.push($("#stats_tabs" + x).hide());
      }
      return _results;
    };
    hide_tabs(1);
    stats_mdp_change = function() {
      var selected;
      selected = $(this).val();
      hide_tabs(0);
      return $("#stats_tabs" + selected).show();
    };
    $(".stats_mdp").change(stats_mdp_change);
    mean = function(the_values) {
      var current_mean, current_n_of_samples, n_of_samples, the_mean, total, value, _i, _len;
      total = 0;
      for (_i = 0, _len = the_values.length; _i < _len; _i++) {
        value = the_values[_i];
        total += value;
      }
      the_mean = total / the_values.length;
      the_mean = the_mean.toFixed(2);
      current_mean = parseFloat($("#mean_value").html).toFixed(2);
      if (the_mean !== current_mean) {
        $("#mean_value").html(the_mean).effect("highlight");
      }
      n_of_samples = the_values.length;
      current_n_of_samples = $("#n_of_samples_value").html();
      console.log("cnos:", current_n_of_samples);
      console.log("n_of_samples:", n_of_samples);
      if (n_of_samples !== current_n_of_samples) {
        return $("#n_of_samples_value").html(current_n_of_samples).effect("highlight");
      }
    };
    edit_data_change = function() {
      var checkbox, checked, real_value, row, the_values, value, values, _i, _len;
      the_values = [];
      values = $('#primary').find(".edit_strain_value");
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        real_value = $(value).val();
        row = $(value).closest("tr");
        checkbox = $(row).find(".edit_strain_checkbox");
        checked = $(checkbox).attr('checked');
        if (!checked) {
          console.log("Not checked");
          continue;
        }
        if (isNumber(real_value) && real_value !== "") {
          the_values.push(parseFloat(real_value));
        }
      }
      return mean(the_values);
    };
    make_table = function() {
      var column, header, row, row_line, rows, the_id, the_rows, _i, _j, _len, _len1, _ref;
      header = "<thead><tr>";
      _ref = basic_table['columns'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        column = _ref[_i];
        the_id = process_id("column_" + column);
        header += "<th id=\"" + the_id + "\">" + column + "</th>";
      }
      header += "</thead>";
      rows = [
        {
          vn: "n_of_samples",
          pretty: "N of Samples"
        }, {
          vn: "mean",
          pretty: "Mean"
        }, {
          vn: "median",
          pretty: "median"
        }, {
          vn: "se",
          pretty: "Standard Error (SE)"
        }
      ];
      console.log("rows are:", rows);
      the_rows = "<tbody>";
      console.log("length of rows:", rows.length);
      for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
        row = rows[_j];
        console.log("rowing");
        row_line = "<tr><td id=\"" + row.vn + "\">" + row.pretty + "</td></tr>";
        console.log("row line:", row_line);
        the_rows += row_line;
      }
      the_rows += "</tbody>";
      console.log("header:", header);
      return console.log("the_rows:", the_rows);
    };
    process_id = function(value) {
      /* Make an id or a class valid javascript by, for example, eliminating spaces
      */
      value = value.replace(" ", "_");
      return value;
    };
    $('#primary').change(edit_data_change);
    console.log("loaded");
    console.log("basic_table is:", basic_table);
    make_table();
    return console.log("end");
  });

}).call(this);
